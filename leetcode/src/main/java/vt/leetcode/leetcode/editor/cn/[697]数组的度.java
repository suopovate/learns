package vt.leetcode.leetcode.editor.cn;

import cn.hutool.core.date.StopWatch;
import cn.hutool.core.lang.Console;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;

class DegreeOfAnArray {
    public static void main(String[] args) {
        Solution solution = new DegreeOfAnArray().new Solution();
        StopWatch stopWatch;
        stopWatch = new StopWatch();
        stopWatch.start("1");
        Console.log(solution.slideWindow(new int[]{

        }));
        stopWatch.stop();
        stopWatch.start("2");
        Console.log(
            solution.findShortestSubArrayViolent(new int[]{

            })
        );
        stopWatch.stop();
        stopWatch.start("3");
        Console.log(
            solution.law(new int[]{

            })
        );
        stopWatch.stop();
        System.out.println(stopWatch.prettyPrint());
    }

    //leetcode submit region begin(Prohibit modification and deletion)
    class Solution {
        public int findShortestSubArray(int[] nums) {
            return lawOptmize(nums);
        }

        public int findShortestSubArrayViolent(int[] nums) {
            // First we find the degree;
            Map<Integer, Integer> map = new HashMap<>();
            for (int num : nums) {
                map.put(num, map.getOrDefault(num, 0) + 1);
            }
            int maxDegree = map.values().stream().max(Integer::compareTo).orElse(0);
            System.out.println(maxDegree);
            if (maxDegree == 0) return 0;
            int minSubLength = Integer.MAX_VALUE;
            // Second we loop the sub array to find the smallest length that has the most degree.
            for (int i = 0; i <= nums.length - maxDegree; i++) {
                for (int j = i + maxDegree - 1; j < nums.length; j++) {
                    Map<Integer, Integer> degree = new HashMap<>();
                    for (int k = i; k <= j; k++) {
                        degree.put(nums[k], degree.getOrDefault(nums[k], 0) + 1);
                    }
                    if (degree.values().stream().max(Integer::compareTo).orElse(0) == maxDegree) {
                        minSubLength = Math.min(j - i + 1, minSubLength);
                        // 这个 i 没必要再找更长的j了
                        break;
                    }
                }
            }
            return minSubLength;
        }

        public int slideWindow(int[] nums) {
            // First we find the degree;
            Map<Integer, Integer> map = new HashMap<>();
            for (int num : nums) {
                map.put(num, map.getOrDefault(num, 0) + 1);
            }
            int maxDegree = map.values().stream().max(Integer::compareTo).orElse(0);
            System.out.println(maxDegree);
            if (maxDegree == 0) return 0;
            int minSubLength = Integer.MAX_VALUE;
            // Second we loop the sub array to find the smallest length that has the most degree.
            // slide window algorithm to find the min length
            // 遍历不同的窗口，最小窗口肯定起码是度
            for (int w = maxDegree; w <= nums.length; w++) {
                // 每次遍历一个窗口
                for (int i = 0; i <= nums.length - w; i++) {
                    Map<Integer, Integer> degree = new HashMap<>();
                    for (int j = i; j < i + w; j++) {
                        // 窗口的每一个元素
                        degree.put(nums[j], degree.getOrDefault(nums[j], 0) + 1);
                    }
                    //                    System.out.println(degree.toString());
                    if (degree.values().stream().max(Integer::compareTo).orElse(0) == maxDegree) {
                        // 没必要再找更长的窗口了
                        return w;
                    }
                }
            }
            return minSubLength;
        }

        public int law(int[] nums) {
            // First we find the degree;
            Map<Integer, Integer> map = new HashMap<>();
            for (int num : nums) {
                map.put(num, map.getOrDefault(num, 0) + 1);
            }
            int maxDegree = map.values().stream().max(Integer::compareTo).orElse(0);
            HashSet<Integer> degreeNums = new HashSet<>();
            map.entrySet().stream().filter(kv -> kv.getValue() == maxDegree).forEach(kv -> degreeNums.add(kv.getKey()));
            System.out.println(maxDegree);
            System.out.println(degreeNums);
            if (maxDegree == 0) return 0;
            int minSubLength = Integer.MAX_VALUE;
            for (Integer degreeNum : degreeNums) {
                int i = 0, j = nums.length - 1;
                while (i <= j) {
                    if (nums[i] == degreeNum && nums[j] == degreeNum) {
                        minSubLength = Math.min(minSubLength, j - i + 1);
                        break;
                    }
                    if (nums[i] != degreeNum) {
                        i++;
                    }
                    if (nums[j] != degreeNum) {
                        j--;
                    }
                }
            }
            return minSubLength;
        }

        public int lawOptmize(int[] nums) {
            // First we find the degree;
            Map<Integer, Integer> map = new HashMap<>();
            // 记录第一次从左边出现的位置
            Map<Integer, Integer> left = new HashMap<>();
            // 记录这个数第一次从右边出现的位置
            Map<Integer, Integer> right = new HashMap<>();
            int maxDegree = 0;
            for (int i = 0; i < nums.length; i++) {
                if (!left.containsKey(nums[i])) {
                    left.put(nums[i], i);
                    right.put(nums[i], i);
                } else {
                    right.put(nums[i], i);
                }
                int degree = map.getOrDefault(nums[i], 0) + 1;
                map.put(nums[i], degree);
                maxDegree = Math.max(maxDegree, degree);
            }
            if (maxDegree == 0) return 0;
            int finalMaxDegree = maxDegree;
            final int[] minSubLength = { Integer.MAX_VALUE };
            map.entrySet().stream().filter(kv -> kv.getValue() == finalMaxDegree).forEach(kv -> {
                minSubLength[0] = Math.min(right.get(kv.getKey()) - left.get(kv.getKey()) + 1, minSubLength[0]);

            });
            return minSubLength[0];
        }
    }
    //leetcode submit region end(Prohibit modification and deletion)

}
