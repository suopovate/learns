动态规划，t字符串从后向前遍历，建立每个索引下后面26个字符最先出现的位置，达到快速遍历的目的，时间复杂度最大O(100)。

* 

```
class Solution {
public:
    bool isSubsequence(string s, string t) {
        if (s.empty() || t.empty()) {
            return s.empty();
        }
        if (s.size() == 1) {
            return t.find(s[0]) != -1;
        }
        if (t.size() == 1) {
            if (s.size() > 1) return false;
            return s[0] == t[0];
        }
        vector<vector<int>> dp(t.size() + 1, vector<int>(26, -1));
        for (int i = t.size() - 2; i >= 0; --i) {
            dp[i] = dp[i + 1];
            dp[i][t[i + 1] - 'a'] = i + 1;
        }
        dp[t.size()] = dp[0];
        dp[t.size()][t[0] - 'a'] = 0;

        int j = dp[t.size()][s[0] - 'a'];
        if (j == -1) { return false; }
        for (int i = 1; i < s.size(); ++i) {
            if (dp[j][s[i] - 'a'] == -1) {
                return false;
            }
            j = dp[j][s[i] - 'a'];
        }   
        return true;
    }
};
```

