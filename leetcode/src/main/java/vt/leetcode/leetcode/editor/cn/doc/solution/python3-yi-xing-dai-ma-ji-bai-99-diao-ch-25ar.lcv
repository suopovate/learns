### 解题思路

![截屏2021-03-26 下午4.21.30.png](https://pic.leetcode-cn.com/1616746910-hSblNa-%E6%88%AA%E5%B1%8F2021-03-26%20%E4%B8%8B%E5%8D%884.21.30.png)
<br>
**对于这道题，刚开始我们无法下手，但是我们可以慢慢思索出这样的规律：**
<br>
**1. 假设我们最少的操作次数是`k`,`k`次操作后每个元素相等，相等元素设为`target`
2. 对于整个列表的`n - 1`个元素都要进行加一操作那么增加的总数是` k * (n - 1)`
3. 原本的列表之和为 `sum(nums)`，`k`次操作后应该存在这样的关系等式：**
<br>

# **k[最少操作次数] * (n - 1)[每次对n - 1个元素进行操作] + sum(nums)[原列表的和] = target[操作后的相等元素] * n**

**即：**
![截屏2021-03-26 下午4.16.15.png](https://pic.leetcode-cn.com/1616746601-THXbmV-%E6%88%AA%E5%B1%8F2021-03-26%20%E4%B8%8B%E5%8D%884.16.15.png)
<br>
**这里最关键的地方是确定`target`的值，如果我们知道了`target`的值那么肯定就能知道`k`,那么`target`的值是多少呢？**

# **答案是:k + nums中的最小值 即：min(nums) + k**

<br> **猜想为何：因为对于最小值，你每次的递加都必须对原列表的最小值加一，每次操作中必须覆盖最小值， k次操作后， 最小值就变为了min(nums) + k，该值就是最后的相同值** **即公式**： ![截屏2021-03-26 下午4.14.20.png](https://pic.leetcode-cn.com/1616746472-EoimeN-%E6%88%AA%E5%B1%8F2021-03-26%20%E4%B8%8B%E5%8D%884.14.20.png) <br> **公式展开变换后得`k`:** ![截屏2021-03-26 下午4.13.42.png](https://pic.leetcode-cn.com/1616746445-RGmfGg-%E6%88%AA%E5%B1%8F2021-03-26%20%E4%B8%8B%E5%8D%884.13.42.png) </br></br>

### 代码

* python3

```python
class Solution:
    def minMoves(self, nums: List[int]) -> int:
        return sum(nums) - len(nums) * min(nums) if len(nums) != 1 else 0
```

