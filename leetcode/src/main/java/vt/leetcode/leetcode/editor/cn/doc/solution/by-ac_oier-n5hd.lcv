## 模拟

将 $A[i]$ 与 $A[A[i]]$ 之间看作存在一条有向边，由于所有数范围都在 $[0, N - 1]$，且不重复，因此至少存在一个环，而问题本质是求所有环的最大长度。

直接根据题意记进行模拟即可，从前往后处理每个 $nums[i]$，并尝试从 $nums[i]$ 出发遍历其所在的环，为了防止某些环被重复处理，对于当前经过的 $nums[i]$ 标记为 $-1$，这样每个数被访问的次数最多不超过 $3$ 次，整体复杂度为 $O(n)$。

代码：

* []

```Java
class Solution {
    public int arrayNesting(int[] nums) {
        int n = nums.length, ans = 0;
        for (int i = 0; i < n; i++) {
            int cur = i, cnt = 0;
            while (nums[cur] != -1) {
                cnt++;
                int c = cur;
                cur = nums[cur];
                nums[c] = -1;
            }
            ans = Math.max(ans, cnt);
        }
        return ans;
    }
}
```

* []

```TypeScript
function arrayNesting(nums: number[]): number {
    let n = nums.length, ans = 0
    for (let i = 0; i < n; i++) {
        let cur = i, cnt = 0
        while (nums[cur] != -1) {
            cnt++
            const c = cur
            cur = nums[cur]
            nums[c] = -1
        }
        ans = Math.max(ans, cnt)
    }
    return ans
};
```

* 时间复杂度：每个数字被访问的次数为常数次，复杂度为 $O(n)$
* 空间复杂度：$O(1)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
