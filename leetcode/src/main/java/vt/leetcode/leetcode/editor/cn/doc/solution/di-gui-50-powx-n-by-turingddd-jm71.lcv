**解题思路：**
通过递归求解，先判断n是奇数还是偶数，如果是偶数，那么只需要先计算出y = x * x 的结果，然后y的次幂就是n / 2。如果是奇数，直接抽离出一个x来，然后和myPow(x * x , n / 2)进行相乘。

* 

```
class Solution {
    // 递归
    public double myPow(double x, int n) {
        // 递归终止条件
        if (n == 0) {
            // 任何数的0次方结果都是1，由于要求返回double类型，因此返回1.0
            return 1.0;
        }
        // 判断n是奇数还是偶数
        // 如果是偶数
        else if ((n & 1) == 0) {
            // 那么只需要先计算出y = x * x 的结果
            // 然后y的次幂就是n / 2
            return myPow(x * x , n / 2);
        }
        // 如果是奇数
        else {
            // 比如n = 9，那么它就可以被划分为4 + 4 + 1，即x^4 * x^4 * x
            // 并且这个时候还需要判断一下n是否为负数
            // 如果是正数
            if (n > 0) {
                // 直接抽离出一个x来，然后和myPow(x * x , n / 2)进行相乘
                return myPow(x * x , n / 2) * x;
            } 
            // 如果是负数
            else {
                return myPow(x * x , n / 2) * (1.0 / x);
            }
        }
    }
}
```

**复杂度分析：**
时间复杂度：O(log⁡n)
空间复杂度：O(log⁡n)

