### 解题思路

2023年4月21日：

思路借鉴于48.旋转图像。

=======================================================

先从一个点i开始，存储到下一个点i+k，然后用tmp存储原先在i+k的值。

然后再在(i+k)+k%n的地方替换成i+k的值（也就是之前用tmp存过的），tmp保存原先在(i+k)+k%n地方的值后再去执行下一个地方。就这么反复循环后最终肯定会返回到最初的起始点i。

定义上述为一个while循环，若回到最初的起始点则break掉。

=======================================================

但问题在于有些例子就这么执行一个while循环就能把所有的值替换掉（示例1）；

有些例子需要执行好几个while循环（示例2）；

或者：//[1,2,3,4,5,6]//k = 4；

=======================================================

所以我们要计算执行这一个while循环会替换掉多少个值，也就是once。

once定义：

想象把该数组复制成好几份，然后左右相邻拼接。（想象拼接了无数组）

从起始点开始跳，每一步跳k单位的长度，

每跳一步就会替换掉一个值，

跳了once步之后才会回到起始点。

once的值就是该while循环替换掉的值的个数。

计算方法：

从起始点到拼接之后数组的起始点的距离是n（数组长度）的倍数。

=======================================================

计算完once后我们就能计算出我们需要几个while循环才能替换所有的值。

time = n / once;

time是需要执行while循环的个数。

如此一来就能遍历数组所有的值。

=======================================================

### 代码

* java

```java
class Solution {
    public void rotate(int[] nums, int k) {
        if (k == 0) {
            return;
        }
        int idx = 0;
        int n = nums.length;
        int temp = nums[0];
        int onc = -1;
        
        for (int i = 1; i <= n; i++) {
            if ((i*k) % n == 0) {
                onc = i;
                break;
            } 
        }
        int time = n / onc;
        
        for (int i = 0; i <= time - 1; i++) {
            idx = i;
            temp = nums[i];
            while(true) {
                int next = (idx + k) % n;
                if (next != i) { 
                    int mid = nums[next];
                    nums[next] = temp;
                    temp = mid;
                    idx = next;
                }else{
                    int mid = nums[next];
                    nums[next] = temp;
                    temp = mid;
                    idx = next;
                    break;
                }
            }
        }
        return;
    }
}

```

