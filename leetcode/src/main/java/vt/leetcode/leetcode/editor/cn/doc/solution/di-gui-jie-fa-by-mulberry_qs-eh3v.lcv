### 解题思路

1. 先递归反转链表
2. 递归求和
3. 将第二步获取的链表再反转

### 代码

- Java解法

* java

```java
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        l1 = reverse(l1);
        l2 = reverse(l2);
        return reverse(add(l1, l2));
    }

    public ListNode reverse(ListNode head) {
        if(head == null || head.next == null) return head;
        ListNode result = reverse(head.next);
        head.next.next = head;
        head.next = null;
        return result;
    }

    public ListNode add(ListNode l1, ListNode l2) {
        if(l1 == null) return l2;
        if(l2 == null) return l1;
        int sum = l1.val + l2.val;
        ListNode result = new ListNode(sum % 10);
        result.next = add(l1.next, l2.next);
        if(sum > 9) result.next = add(result.next, new ListNode(1));
        return result;
    }
}
```

- Go解法

* golang

```golang
/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {
    l1 = ReverseList(l1)
    l2 = ReverseList(l2)
    return ReverseList(Add(l1, l2))
}

func ReverseList(head *ListNode) *ListNode {
    if head == nil || head.Next == nil { return head }
    result := ReverseList(head.Next)
    head.Next.Next = head
    head.Next = nil
    return result
}

func Add(l1 *ListNode, l2 *ListNode) *ListNode {
    if l1 == nil { return l2 }
    if l2 == nil { return l1 }
    sum := l1.Val + l2.Val
    result := &ListNode{sum % 10, nil}
    result.Next = Add(l1.Next, l2.Next)
    if sum > 9 { result.Next = Add(result.Next, &ListNode{1, nil}) }
    return result
}
```

