### 解题思路

数组遍历获取最大值和最小值
* 1. 通过查找数组中最小的两个数和最大的三个数，因为乘积比较实际上用到的是这五个数
* 2. 计算乘积
* 1）全是整数，取后三个积
* 2）全是负数，取后三个数积
* 3）有正有负，max(前两个*最后一个数，后三个数积)

### 代码

* java

```java
class Solution {
    // /**
    //  * 三个数最大值的计算
    //  * 1. 先进行排序
    //  * 2. 计算乘积
    //  * 1）全是整数，取后三个积
    //  * 2）全是负数，取后三个数积
    //  * 3）有正有负，max(前两个*最后一个数，后三个数积)
    //  */
    // public int maximumProduct(int[] nums) {
    //     // 1.先排序
    //     Arrays.sort(nums);
    //     int len = nums.length;
    //     // 计算乘积
    //     return Math.max(nums[0] * nums[1] * nums[len-1], nums[len-1] * nums[len-2] * nums[len-3]);
    // }

    /**
     * 三个数最大值的计算
     * 1. 通过查找数组中最小的两个数和最大的三个数，因为乘积比较实际上用到的是这五个数
     * 2. 计算乘积
     * 1）全是整数，取后三个积
     * 2）全是负数，取后三个数积
     * 3）有正有负，max(前两个*最后一个数，后三个数积)
     */
    public int maximumProduct(int[] nums) {
        // (min1, min2, max1, max2, max3)
        // 1.遍历查找最小的两个数和最大的三个数
        int min1 = Integer.MAX_VALUE;
        // 第二个最小
        int min2 = Integer.MAX_VALUE;
        // 第一个最大
        int max1 = Integer.MIN_VALUE;
        // 第二个最大
        int max2 = Integer.MIN_VALUE;
        // 第三个最大
        int max3 = Integer.MIN_VALUE;
        // 遍历数组初始化
        for(int x : nums) {
            // 最小数移动
            if(x < min1) {
                min2 = min1;
                min1 = x;
            } else if(x < min2) {
                min2 = x;
            }
            // 最大数移动
            if(x > max3) {
                // 最大数往前移动
                max1 = max2;
                max2 = max3;
                max3 = x;
            } else if(x > max2) {
                // 前两个最大数移动
                max1 = max2;
                max2 = x;
            } else if(x > max1) {
                max1 = x;
            }
        }
        // 2.计算乘积
        return Math.max(min1 * min2 * max3, max1 * max2 * max3);
    }
}
```

