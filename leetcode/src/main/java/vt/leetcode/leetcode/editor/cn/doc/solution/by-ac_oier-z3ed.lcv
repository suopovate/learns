## 模拟

我们使用「栈」来模拟执行过程：当一个函数被调用（`op = start`）时，压入栈内，当函数调用完成（`op = end`）时，从栈顶弹出（此时栈顶元素必然是该结束函数的入栈记录），使用变量 `cur` 记录当前时间。

从前往后处理所有的 $log[i]$，根据 $log[i]$ 是属于函数调用还是函数结束进行分情况讨论：

* 当 $log[i]$ 为函数调用：此时从该函数的调用发起时间 `ts` 到上一次记录的当前时间，都是前一函数的执行时间，因此可以将 `ts - cur` 累加到栈帧中的前一函数。即若栈不为空，则将该时间累加到栈顶对应的函数上，然后将 $log[i]$ 入栈，同时更新当前时间；
* 当 $log[i]$ 为函数结束：此时栈顶元素必然是该函数的调用记录，此时 $log[i]$ 的结束时间与上一次记录的当前时间的时长 `ts - cur + 1`，必然是该函数的执行时间，将其累加到当前函数中，并更新当前时间。

代码：

* []

```Java
class Solution {
    public int[] exclusiveTime(int n, List<String> logs) {
        int[] ans = new int[n];
        Deque<Integer> d = new ArrayDeque<>();
        int cur = -1;
        for (String log : logs) {
            String[] ss = log.split(":");
            int idx = Integer.parseInt(ss[0]), ts = Integer.parseInt(ss[2]);
            if (ss[1].equals("start")) {
                if (!d.isEmpty()) ans[d.peekLast()] += ts - cur;
                d.addLast(idx);
                cur = ts;
            } else {
                int func = d.pollLast();
                ans[func] += ts - cur + 1;
                cur = ts + 1;
            }
        }
        return ans;
    }
}
```

* []

```TypeScript
function exclusiveTime(n: number, logs: string[]): number[] {
    const ans = new Array<number>(n).fill(0)
    const stk = new Array<number>()
    let he = 0, ta = 0, cur = -1
    for (let log of logs) {
        const ss = log.split(":")
        const idx = Number(ss[0]), ts = Number(ss[2])
        if (ss[1] == "start") {
            if (he < ta) ans[stk[ta - 1]] += ts - cur
            stk[ta++] = idx
            cur = ts
        } else {
            const func = stk[--ta]
            ans[func] += ts - cur + 1
            cur = ts + 1
        }
    }
    return ans
};
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(n)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://acoier.com/oimg/gzh-qrcode.webp) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
