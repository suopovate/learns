### 解题思路

按题意做dfs即可，关键是如何做好标记，以免重复，如果粗暴的以每个元素 为开始去做dfs肯定会超时，输入量级是20000，每个元素为起始去做dfs就是$O(n^2)$，在20000量级，肯定会超时。

嵌套，可以视为元素与元素的连接，比如i->A[i]，可视为元素i到A[i]的连接，A[i]->A[A[i]]则是A[i]到A[A[i]]的连接，因为数组A中元素无重复，且都 是在[0, n-1]，之间，那么按照嵌套，肯定会形成环。此题，也就是找环的最大长度。

要想减少dfs，当遍历到某一个元素时，就需要知道是否还需要 以此为起始去做dfs。**既然是一个环，那么它哪里会有起始呢？换句话说，如果是环，无论 从环的哪一个点开始dfs都会得到一样的长度，都 会回到同一个起点。由此，可以把环中的元素进行标记，再 次遇到遍历 过的环中的元素时，可以直接跳过。**

至于标记，可以用额外数组做标记，也可以原地修改数组A，都 是一样的。

### 代码

* java

```java
class Solution {
    public int arrayNesting(int[] nums) {
        int n = nums.length;
        int result = 1;
        for (int i = 0; i < n; ++i) {
            int c = 0;
            while (nums[i] < n) {
                int next = nums[i];
                nums[i] = n;
                i = next;
                ++c;
            }
            result = Math.max(result, c);
        }

        return result;
    }
}
```

