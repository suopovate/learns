### 解法一

* 

```
class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        ##解法一，先求最长公共子序列,然后减去最长的长度
        n = len(word1); m=len(word2)
        dp = [[0]*(m+1) for _ in range(n+1)]
        res = -1
        for i in range(1,n+1):
            for j in range(1,m+1):
                if word1[i-1]==word2[j-1]:
                    dp[i][j] = dp[i-1][j-1]+1
                else:
                    dp[i][j] = max(dp[i-1][j],dp[i][j-1],dp[i-1][j-1])
                res = max(res,dp[i][j])
        return n-res+m-res 
        
```

### 解法二

* 

```
class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        ## dp[i][j] 以i-1为结尾的word1和以j-1为结尾的word2相同所需要的最小步数
        n=len(word1);m=len(word2)
        dp=[[0]*(m+1) for _ in range(n+1)]
        for i in range(n+1):
            dp[i][0]=i 
        for j in range(m+1):
            dp[0][j]=j
        for i in range(1,n+1):
            for j in range(1,m+1):
                if word1[i-1]==word2[j-1]:
                    dp[i][j] = dp[i-1][j-1]
                else:
                    dp[i][j] = min(dp[i-1][j]+1,dp[i][j-1]+1,dp[i-1][j-1]+2)
        return dp[n][m]
```

